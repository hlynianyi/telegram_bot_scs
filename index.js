require("dotenv").config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
const token = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAPH_TOKEN = process.env.TELEGRAPH_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const TelegramBot = require("node-telegram-bot-api");
const Telegraph = require("telegraph-node");
const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const fs = require("fs");
const { INFO, WELCOME_MESSAGE } = require("./data.js");

if (!token) {
  throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
}
if (!TELEGRAPH_TOKEN) {
  throw new Error("TELEGRAPH_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
}
if (!ADMIN_ID) {
  throw new Error("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
}

const ph = new Telegraph();
const bot = new TelegramBot(token, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø—Ä–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
app.use(bodyParser.json());
app.use("/assets", express.static(path.join(__dirname, "assets")));

const commands = [
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "catalog",
    description: "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
  },
  {
    command: "info",
    description: "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
  },
];

bot.setMyCommands(commands);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  console.log(`User @${msg.chat.username} joined, ID:`, msg.chat.id);
  bot.sendMessage(chatId, WELCOME_MESSAGE);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/\/getid/, (msg) => {
  console.log(`User @${msg.chat.username} asking for ID:`, msg.chat.id);
  bot.sendMessage(msg.chat.id, `–í–∞—à ID: ${msg.chat.id}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog
bot.onText(/\/catalog/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = "catalog";
  const options = {
    reply_markup: {
      // todo: –¥–æ–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      keyboard: [
        [{ text: "—ç–ª–µ–∫—Ç—Ä–æ-–º–æ—Ç–æ—Ü–∏–∫–ª—ã" }],
        [{ text: "—ç–ª–µ–∫—Ç—Ä–æ-—Å–∫—É—Ç–µ—Ä—ã" }],
        [{ text: "–∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã" }],
        // [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  };
  // todo: –¥–æ–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  bot.sendMessage(
    chatId,
    `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ:
  -  —ç–ª–µ–∫—Ç—Ä–æ-–º–æ—Ç–æ—Ü–∏–∫–ª—ã
  -  —ç–ª–µ–∫—Ç—Ä–æ-—Å–∫—É—Ç–µ—Ä—ã
  -  –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã`,
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–º–æ—Ç–æ—Ü–∏–∫–ª—ã"
bot.onText(/\—ç–ª–µ–∫—Ç—Ä–æ-–º–æ—Ç–æ—Ü–∏–∫–ª—ã/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = "bikes";
  sendProductList(chatId, "—ç–ª–µ–∫—Ç—Ä–æ-–º–æ—Ç–æ—Ü–∏–∫–ª");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Å–∫—É—Ç–µ—Ä—ã"
bot.onText(/\—ç–ª–µ–∫—Ç—Ä–æ-—Å–∫—É—Ç–µ—Ä—ã/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = "scouters";
  sendProductList(chatId, "—ç–ª–µ–∫—Ç—Ä–æ-—Å–∫—É—Ç–µ—Ä");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã"
bot.onText(/\–∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = "quadrocycles";
  sendProductList(chatId, "–∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª");
});

function capitalizeFirstLetter(string) {
  if (!string) return string;
  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
}

async function sendProductList(chatId, categoryName) {
  const allProducts = loadProducts();
  const products = allProducts.filter((prod) => {
    return (
      String(prod.category).toLowerCase() === String(categoryName).toLowerCase()
    );
  });

  if (products.length === 0) {
    bot.sendMessage(chatId, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.");
    return;
  }

  for (const [index, product] of products.entries()) {
    let content = [];

    content.push({
      tag: "figcaption",
      children: [capitalizeFirstLetter(product.category), " - ", product.name],
    });
    content.push({
      tag: "p",
      children: [`–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ üîã –ê–ö–ë üîã!`],
    });
    product.variants.forEach((variant, idx) => {
      content.push({
        tag: "p",
        children: [
          `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Ññ${idx + 1}:\n`,
          `–¶–µ–Ω–∞: üíµ${variant.price} —Ä—É–±.\n`,
          `–°–∫–æ—Ä–æ—Å—Ç—å: üöÄ${variant.speed} –∫–º/—á.\n`,
          `–ú–æ—Ç–æ—Ä –∫–æ–ª–µ—Å–æ: ${variant.engine}w.\n`,
          `–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: ${variant.controller}w.\n`,
        ],
      });
    });

    if (product.images) {
      product.images.map((image) => {
        content.push({
          tag: "figure",
          children: [
            {
              tag: "img",
              attrs: {
                src: image,
              },
            },
          ],
        });
      });
    }

    if (product.videos) {
      product.videos.map((video) => {
        content.push({
          tag: "figure",
          children: [
            {
              tag: "video",
              attrs: {
                src: video,
                controls: true,
              },
            },
          ],
        });
      });
    }

    let priceString = "";
    product.variants.forEach((variant, idx) => {
      priceString += `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è ${idx + 1}: ${variant.price} —Ä—É–±.\n`;
    });

    const pageContent = product.variants.map((variant, idx) => {
      return {
        tag: "p",
        children: [`–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è ${idx + 1}: ${variant.price} —Ä—É–±.`],
      };
    });

    if (pageContent.length === 0) {
      pageContent.push({
        tag: "p",
        children: ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
      });
    }

    try {
      const page = await ph.createPage(TELEGRAPH_TOKEN, "Small Shop", content);

      const sellerContactString = `@mistersleep11 - –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞`;
      const categoryFormatted = capitalizeFirstLetter(product.category);

      let captionString = `${index + 1}. ${categoryFormatted} ${
        product.name
      }\n${sellerContactString}`;

      if (product.variants.length > 1) {
        captionString = `${captionString}\n–¶–µ–Ω–∞üí∞: ${
          product.variants[0].price
        } - ${product.variants.at(-1).price} —Ä—É–±.`;
      } else {
        captionString = `${captionString}\n–¶–µ–Ω–∞üí∞: ${product.variants[0].price} —Ä—É–±.`;
      }

      const mediaGroup = [
        ...(product.images || []).map((image) => ({
          type: "photo",
          media: image,
          parse_mode: "Markdown",
        })),
        ...(product.videos || []).map((video) => ({
          type: "video",
          media: video,
          parse_mode: "Markdown",
        })),
      ];

      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url: `https://telegra.ph/${page.path}` }],
          ],
        },
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
      for (let i = 0; i < mediaGroup.length; i += 10) {
        const mediaChunk = mediaGroup.slice(i, i + 10);
        await bot.sendMediaGroup(chatId, mediaChunk);
      }

      await bot.sendMessage(chatId, `${captionString}`, options);
    } catch (error) {
      console.error("Error on method createPage:", error);
      bot.sendMessage(
        chatId,
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ "${product.name}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
      );
    }
  }
}

const addProductSteps = {
  awaiting_category: "awaiting_name",
  awaiting_name: "awaiting_variant",
  awaiting_variant: "awaiting_more_variants_or_media",
  awaiting_more_variants_or_media: "awaiting_media",
  awaiting_media: "complete",
};

const addProductMessages = {
  awaiting_name: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
  awaiting_variant:
    "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–Ω–∞, —Å–∫–æ—Ä–æ—Å—Ç—å, –º–æ—Ç–æ—Ä, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä) —á–µ—Ä–µ–∑ –ó–ê–ü–Ø–¢–£–Æ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä—É–±–ª–µ–π, –∫–º/—á –∏ —Ç.–¥):",
  awaiting_more_variants_or_media:
    "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é (—Ü–µ–Ω–∞, —Å–∫–æ—Ä–æ—Å—Ç—å, –º–æ—Ç–æ—Ä, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä) —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä—É–±–ª–µ–π, –∫–º/—á –∏ —Ç.–¥):",
  awaiting_media:
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ (–ü–û –û–î–ù–û–ú–£ –ó–ê –†–ê–ó). –í–≤–µ–¥–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
};

const userStates = {};
let productBuffer = {}; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addproduct –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.onText(/\/addproduct/, (msg) => {
  const chatId = msg.chat.id;
  if (String(chatId) === String(ADMIN_ID)) {
    userStates[chatId] = "awaiting_category";
    productBuffer = {}; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    bot.sendMessage(
      chatId,
      "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≠–ª–µ–∫—Ç—Ä–æ-–º–æ—Ç–æ—Ü–∏–∫–ª, –≠–ª–µ–∫—Ç—Ä–æ-—Å–∫—É—Ç–µ—Ä):"
    );
  } else {
    bot.sendMessage(
      chatId,
      "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    );
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  console.log("action:>> ", text);
  if (chatId !== Number(ADMIN_ID)) return;

  const currentStep = userStates[chatId];

  if (currentStep in addProductSteps && currentStep !== "awaiting_media") {
    if (
      currentStep === "awaiting_variant" ||
      currentStep === "awaiting_more_variants_or_media"
    ) {
      console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ :>> ", text);
      const [price, speed, engine, controller] = text
        .split(",")
        .map((item) => item.trim());

      if (price !== "/skip") {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ /skip
        const variant = { price, speed, engine, controller };
        if (!productBuffer.variants) {
          productBuffer.variants = [];
        }
        productBuffer.variants.push(variant);
      }

      userStates[chatId] = "awaiting_more_variants_or_media";
    } else {
      productBuffer[currentStep.replace("awaiting_", "")] = text;
      userStates[chatId] = addProductSteps[currentStep];
    }
    bot.sendMessage(chatId, addProductMessages[userStates[chatId]]);
  }

  if (currentStep === "awaiting_media" && (msg.photo || msg.video)) {
    try {
      const fileId = msg.photo
        ? msg.photo[msg.photo.length - 1].file_id
        : msg.video.file_id;
      const mediaType = msg.photo ? "images" : "videos";
      if (!productBuffer[mediaType]) {
        productBuffer[mediaType] = [];
      }
      productBuffer[mediaType].push(fileId);
      bot.sendMessage(
        chatId,
        `–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ", error);
      bot.sendMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    }
  }

  if (currentStep === "complete") {
    saveProduct(chatId);
  }
});

function saveProduct(chatId) {
  const products = loadProducts();
  productBuffer.images = productBuffer.images || [];
  productBuffer.videos = productBuffer.videos || [];
  products.push(productBuffer);
  fs.writeFileSync("products.json", JSON.stringify(products, null, 2));
  bot.sendMessage(chatId, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
  userStates[chatId] = null;
  productBuffer = {};
}

function loadProducts() {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
  if (fs.existsSync("products.json")) {
    try {
      const data = fs.readFileSync("products.json", "utf8");
      if (data.trim().length === 0) {
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç
      }
      const products = JSON.parse(data);
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      return products.map((product) => {
        if (!Array.isArray(product.variants)) {
          product.variants = [];
        }
        return product;
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ products.json:", error);
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    }
  }
  return [];
}

// –ö–æ–º–∞–Ω–¥–∞ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ —ç—Ç–∞–ø–∞
bot.onText(/\/skip/, (msg) => {
  const chatId = msg.chat.id;
  const currentStep = userStates[chatId];

  if (currentStep === "awaiting_more_variants_or_media") {
    userStates[chatId] = "awaiting_media";
    bot.sendMessage(chatId, addProductMessages[userStates[chatId]]);
  } else if (currentStep === "awaiting_media") {
    userStates[chatId] = "complete";
    saveProduct(chatId);
  }
});

bot.onText(/\/info/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, INFO);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on("polling_error", (error) => {
  console.error(error.code); // => 'EFATAL'
  if (error.response) {
    const statusCode = error.response.statusCode;
    if (statusCode === 502) {
      console.log("Received 502 error. Retrying in 5 seconds.");
      setTimeout(() => {
        bot.startPolling();
      }, 5000);
    } else if (statusCode === 429) {
      const retryAfter = error.response.body.parameters.retry_after;
      console.log(`Received 429 error. Retrying after ${retryAfter} seconds.`);
      setTimeout(() => {
        bot.startPolling();
      }, retryAfter * 1000);
    }
  }
});

// –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø—Ä–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(
    `Server is running on port ${PORT}\n------------------------------`
  );
});
